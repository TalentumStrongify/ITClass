package com.telefonica.centroseducativos.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.telefonica.centroseducativos.model.CentroEducativo;
import com.telefonica.centroseducativos.model.CentroEducativoModel;
import com.telefonica.centroseducativos.model.CentroEducativoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CentroEducativo service. Represents a row in the &quot;CentrosEducativos_CentroEducativo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.telefonica.centroseducativos.model.CentroEducativoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CentroEducativoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CentroEducativoImpl
 * @see com.telefonica.centroseducativos.model.CentroEducativo
 * @see com.telefonica.centroseducativos.model.CentroEducativoModel
 * @generated
 */
@JSON(strict = true)
public class CentroEducativoModelImpl extends BaseModelImpl<CentroEducativo>
    implements CentroEducativoModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a centro educativo model instance should use the {@link com.telefonica.centroseducativos.model.CentroEducativo} interface instead.
     */
    public static final String TABLE_NAME = "CentrosEducativos_CentroEducativo";
    public static final Object[][] TABLE_COLUMNS = {
            { "idce", Types.INTEGER },
            { "nombrece", Types.VARCHAR },
            { "idca", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table CentrosEducativos_CentroEducativo (idce INTEGER not null primary key,nombrece VARCHAR(75) null,idca INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table CentrosEducativos_CentroEducativo";
    public static final String ORDER_BY_JPQL = " ORDER BY centroEducativo.idce ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CentrosEducativos_CentroEducativo.idce ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.telefonica.centroseducativos.model.CentroEducativo"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.telefonica.centroseducativos.model.CentroEducativo"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.telefonica.centroseducativos.model.CentroEducativo"));
    private static ClassLoader _classLoader = CentroEducativo.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CentroEducativo.class
        };
    private int _idce;
    private String _nombrece;
    private int _idca;
    private CentroEducativo _escapedModel;

    public CentroEducativoModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static CentroEducativo toModel(CentroEducativoSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        CentroEducativo model = new CentroEducativoImpl();

        model.setIdce(soapModel.getIdce());
        model.setNombrece(soapModel.getNombrece());
        model.setIdca(soapModel.getIdca());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<CentroEducativo> toModels(
        CentroEducativoSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<CentroEducativo> models = new ArrayList<CentroEducativo>(soapModels.length);

        for (CentroEducativoSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _idce;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setIdce(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idce;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CentroEducativo.class;
    }

    @Override
    public String getModelClassName() {
        return CentroEducativo.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idce", getIdce());
        attributes.put("nombrece", getNombrece());
        attributes.put("idca", getIdca());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer idce = (Integer) attributes.get("idce");

        if (idce != null) {
            setIdce(idce);
        }

        String nombrece = (String) attributes.get("nombrece");

        if (nombrece != null) {
            setNombrece(nombrece);
        }

        Integer idca = (Integer) attributes.get("idca");

        if (idca != null) {
            setIdca(idca);
        }
    }

    @JSON
    @Override
    public int getIdce() {
        return _idce;
    }

    @Override
    public void setIdce(int idce) {
        _idce = idce;
    }

    @JSON
    @Override
    public String getNombrece() {
        if (_nombrece == null) {
            return StringPool.BLANK;
        } else {
            return _nombrece;
        }
    }

    @Override
    public void setNombrece(String nombrece) {
        _nombrece = nombrece;
    }

    @JSON
    @Override
    public int getIdca() {
        return _idca;
    }

    @Override
    public void setIdca(int idca) {
        _idca = idca;
    }

    @Override
    public CentroEducativo toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CentroEducativo) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CentroEducativoImpl centroEducativoImpl = new CentroEducativoImpl();

        centroEducativoImpl.setIdce(getIdce());
        centroEducativoImpl.setNombrece(getNombrece());
        centroEducativoImpl.setIdca(getIdca());

        centroEducativoImpl.resetOriginalValues();

        return centroEducativoImpl;
    }

    @Override
    public int compareTo(CentroEducativo centroEducativo) {
        int primaryKey = centroEducativo.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CentroEducativo)) {
            return false;
        }

        CentroEducativo centroEducativo = (CentroEducativo) obj;

        int primaryKey = centroEducativo.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<CentroEducativo> toCacheModel() {
        CentroEducativoCacheModel centroEducativoCacheModel = new CentroEducativoCacheModel();

        centroEducativoCacheModel.idce = getIdce();

        centroEducativoCacheModel.nombrece = getNombrece();

        String nombrece = centroEducativoCacheModel.nombrece;

        if ((nombrece != null) && (nombrece.length() == 0)) {
            centroEducativoCacheModel.nombrece = null;
        }

        centroEducativoCacheModel.idca = getIdca();

        return centroEducativoCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{idce=");
        sb.append(getIdce());
        sb.append(", nombrece=");
        sb.append(getNombrece());
        sb.append(", idca=");
        sb.append(getIdca());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.telefonica.centroseducativos.model.CentroEducativo");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idce</column-name><column-value><![CDATA[");
        sb.append(getIdce());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nombrece</column-name><column-value><![CDATA[");
        sb.append(getNombrece());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idca</column-name><column-value><![CDATA[");
        sb.append(getIdca());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
